/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./Player/temp1528155874269.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./Player/temp1528155874269.js":
/*!*************************************!*\
  !*** ./Player/temp1528155874269.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar utils = {\n    timemat: function timemat(time) {\n        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n        var h = !type ? 0 : Math.floor(time / 3600),\n            i = Math.floor((time - h * 3600) / 60),\n            s = Math.floor(time - h * 3600 - i * 60);\n\n        h = h < 10 ? '0' + h : h;\n        i = i < 10 ? '0' + i : i;\n        s = s < 10 ? '0' + s : s;\n        return (!type ? '' : h + ':') + i + ':' + s;\n    },\n    addEvent: function addEvent(el, evt, fn) {\n        if (window.addEventListener) {\n            el.addEventListener(evt, fn);\n        } else if (window.attachEvent) {\n            el.addEventListener('on' + evt, fn);\n        }\n    },\n    addClass: function addClass(el, cls) {\n        if (el.classList) {\n            el.classList.add(cls);\n        } else {\n            var list = el.className.split(/\\s+/);\n            if (list.indexOf(cls) === -1) {\n                list.push(cls);\n            }\n            el.className = list.join(' ');\n        }\n    },\n    removeClass: function removeClass(el, cls) {\n        if (el.classList) {\n            el.classList.remove(cls);\n        } else {\n            var list = el.className.split(/\\s+/),\n                index = void 0;\n            if ((index = list.indexOf(cls)) !== -1) {\n                list.splice(index, 1);\n            }\n            el.className = list.join(' ');\n        }\n    },\n    isFullscreen: function isFullscreen() {\n        return document.fullscreen || document.webkitIsFullScreen || document.mozFullScreen || false;\n    },\n    exitFullscreen: function exitFullscreen() {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.webkitCancelFullScreen) {\n            document.webkitCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.msExitFullscreen) {\n            document.msExitFullscreen();\n        }\n    },\n    fullscreen: function fullscreen(el) {\n        if (el.requestFullscreen) {\n            el.requestFullscreen();\n        } else if (el.webkitRequestFullscreen) {\n            el.webkitRequestFullscreen();\n        } else if (el.mozRequestFullScreen) {\n            el.mozRequestFullScreen();\n        } else if (el.msRequestFullscreen) {\n            el.msRequestFullscreen();\n        }\n    },\n    time: function time(timemat) {\n        var arr = timemat.split(/[:：]+/);\n        if (arr.length === 3) {\n            return parseInt(arr[0]) * 3600 + parseInt(arr[1]) * 60 + parseFloat(arr[2]);\n        } else {\n            return parseInt(arr[0]) * 60 + parseFloat(arr[1]);\n        }\n    },\n    getCalced: function getCalced(node, attr) {\n        if (node && node.nodeType === 1 && window.getComputedStyle) {\n            return window.getComputedStyle(node)[attr];\n        } else {\n            return 0;\n        }\n    },\n    setTransformY: function setTransformY(el, v, bool) {\n        if ('transform' in document.documentElement.style) {\n            el.style.webkitTransform = el.style.mozTransform = el.style.msTransform = el.style.oTransform = el.style.transform = 'translateY(' + (bool ? v + 'px' : '-' + v + '00%') + ')';\n        } else {\n            el.style.top = bool ? v + 'px' : '-' + v + '00%';\n        }\n    }\n};\nvar lrcModeReg = /player-lrc-mode-[0-9]+/g;\n\nvar Player = function () {\n    function Player(id) {\n        var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n        _classCallCheck(this, Player);\n\n        if ((typeof id === 'undefined' ? 'undefined' : _typeof(id)) === 'object') {\n            opt = id;\n            id = opt.selector;\n        }\n        if (typeof id === 'string') {\n            if ((typeof opt === 'undefined' ? 'undefined' : _typeof(opt)) === 'object') {\n                this.options = opt;\n            }\n            this.__define__('xhr', {\n                value: new XMLHttpRequest()\n            });\n            this.__define__('lrcData', {\n                writable: true,\n                value: null\n            });\n            this.__define__('lrcKeys', {\n                writable: true,\n                value: null\n            });\n            this.__define__('lrcLen', {\n                writable: true,\n                value: 0\n            });\n            this.__define__('timer', {\n                writable: true,\n                value: 0\n            });\n\n            this.__init__(document.querySelector(id));\n\n            this.__define__('private', {\n                value: 0\n            });\n        }\n    }\n\n    _createClass(Player, [{\n        key: '__init__',\n        value: function __init__(box) {\n            this.__check__('init');\n            this.__dom__();\n            this.__ob__();\n\n            this.currentTime = 0;\n            this.volume = .5;\n            this.duration = 0;\n            if (!this.options.showLrcLines) this.options.showLrcLines = 7;\n\n            this.__bindEvent__();\n            box.appendChild(this[0]);\n        }\n    }, {\n        key: '__dom__',\n        value: function __dom__() {\n            this.__check__('__createDom__');\n            this[0] = document.createElement('div');\n            this[0].className = 'player player-1';\n            this[0].innerHTML = '\\n        <video data-name=\"video\"' + (this.options.src ? ' src=\"' + this.options.src + '\"' : '') + ' poster=\"' + (this.options.poster || '') + '\" class=\"player-video\"></video>\\n        <div data-name=\"lrc\" class=\"player-lrc\"></div>\\n        <div data-name=\"ctrls\" class=\"player-controls\">\\n            <div class=\"player-slider\">\\n                <div data-name=\"buf\" class=\"player-slider-buf\"></div>\\n                <div data-name=\"thumb\" class=\"player-slider-thumb\"></div>\\n            </div>\\n            <div class=\"player-toolbar\">\\n                <div class=\"player-toolbar-left\">\\n                    <span data-name=\"btn\" class=\"player-btn\"></span>\\n                    <span data-name=\"cur\" class=\"player-current-time\">--:--</span>\\n                    <span data-name=\"dur\" class=\"player-duration\">/ --:--</span>\\n                </div>\\n                <div class=\"player-toolbar-right\">\\n                    <span data-name=\"vswitch\" class=\"player-volume-switch\">\\n                        <i class=\"player-volume-switch-rect\"></i>\\n                        <i class=\"player-volume-switch-tri\"></i>\\n                        <i class=\"player-volume-switch-stat\">\\n                            <i class=\"player-volume-switch-dot1\"></i>\\n                            <i class=\"player-volume-switch-dot2\"></i>\\n                            <i class=\"player-volume-switch-dot3\"></i>\\n                            <i class=\"player-volume-switch-mute\">&times;</i>\\n                        </i>\\n                    </span>\\n                    <span class=\"player-volume-slider\">\\n                        <i data-name=\"vthumb\" class=\"player-volume-slider-thumb\"></i>\\n                    </span>\\n                    <span data-name=\"fscreen\" class=\"player-fullscreen\">\\n                        <i class=\"player-fullscreen-tl\"></i>\\n                        <i class=\"player-fullscreen-tr\"></i>\\n                        <i class=\"player-fullscreen-bl\"></i>\\n                        <i class=\"player-fullscreen-br\"></i>\\n                    </span>\\n                </div>\\n            </div>\\n        </div>';\n\n            this.els = {\n                loading: document.createElement('div')\n            };\n\n            this.els.loading.className = 'r-loading';\n\n            for (var els = this[0].querySelectorAll('[data-name]'), len = els.length, i = 0; i < len; i++) {\n                this.els[els[i].getAttribute('data-name')] = els[i];\n                els[i].removeAttribute('data-name');\n            }\n        }\n    }, {\n        key: '__define__',\n        value: function __define__(name, obj) {\n            this.__check__('__define__');\n            Object.defineProperty(this, name, obj);\n        }\n    }, {\n        key: '__ob__',\n        value: function __ob__() {\n            this.__check__('__ob__');\n            var _this = this,\n                curtime = void 0,\n                volume = void 0,\n                activeIndex = void 0;\n            _this.__define__('currentTime', {\n                set: function set(val) {\n                    if (val !== curtime) {\n                        curtime = val;\n                        _this.els.cur.innerText = utils.timemat(curtime);\n                        _this.els.thumb.style.width = curtime / _this.duration * 100 + '%';\n                        _this.getLrcActive(curtime);\n                    }\n                },\n                get: function get() {\n                    return curtime;\n                }\n            });\n            _this.__define__('volume', {\n                set: function set(val) {\n                    if (val !== volume) {\n                        volume = val;\n                        _this.els.video.volume = volume;\n                        _this.els.vthumb.style.width = volume * 100 + '%';\n                    }\n                },\n                get: function get() {\n                    return volume;\n                }\n            });\n            _this.__define__('activeIndex', {\n                set: function set(val) {\n                    if (val !== activeIndex) {\n                        activeIndex = val;\n                        _this.renderLrc();\n                    }\n                },\n                get: function get() {\n                    return activeIndex;\n                }\n            });\n        }\n    }, {\n        key: '__bindEvent__',\n        value: function __bindEvent__() {\n            this.__check__('bindEvent');\n            var _this = this,\n                video = _this.els.video,\n                btn = _this.els.btn,\n                loading = _this.els.loading;\n\n            utils.addEvent(window, 'resize', function () {\n                _this.setLrcMode();\n            });\n\n            utils.addEvent(video, 'loadstart', function () {\n                _this[0].appendChild(loading);\n            });\n\n            utils.addEvent(video, 'durationchange', function () {\n                _this.duration = this.duration;\n                _this.currentTime = 0;\n                _this.els.dur.innerText = '/ ' + utils.timemat(this.duration);\n                _this.loadLrc(_this.options.lrc);\n            });\n\n            utils.addEvent(video, 'loadeddata', function () {\n                _this[0].removeChild(loading);\n            });\n\n            utils.addEvent(video, 'error', function () {\n                loading.innerHTML = 'fail';\n                utils.addClass(loading, 'r-loadend');\n                utils.removeClass(loading, 'r-loading');\n            });\n\n            utils.addEvent(btn, 'click', function () {\n                if (video.paused) {\n                    video.play();\n                    video.autoplay = true;\n                    utils.addClass(btn, 'player-btn-playing');\n                } else {\n                    video.pause();\n                    video.autoplay = false;\n                    utils.removeClass(btn, 'player-btn-playing');\n                }\n            });\n\n            utils.addEvent(video, 'timeupdate', function () {\n                try {\n                    _this.els.buf.style.width = video.buffered.end(video.buffered.length - 1) / this.duration * 100 + '%';\n                } catch (err) {}\n                _this.currentTime = this.currentTime;\n            });\n\n            utils.addEvent(_this.els.thumb.parentNode, 'click', function (e) {\n                if (video.duration > 0) {\n                    var percent = e.offsetX / this.offsetWidth;\n                    _this.currentTime = percent * video.duration;\n                    video.currentTime = Math.round(percent * video.duration);\n                }\n            });\n\n            utils.addEvent(_this.els.vthumb.parentNode, 'click', function (e) {\n                _this.volume = e.offsetX / this.offsetWidth;\n            });\n\n            utils.addEvent(_this.els.fscreen, 'click', function () {\n                if (utils.isFullscreen()) {\n                    utils.exitFullscreen();\n                    utils.removeClass(_this.els.fscreen, 'player-fullscreen-on');\n                } else {\n                    utils.fullscreen(_this[0]);\n                    utils.addClass(_this.els.fscreen, 'player-fullscreen-on');\n                }\n            });\n\n            utils.addEvent(_this.els.vswitch, 'click', function () {\n                if (video.muted = !video.muted) {\n                    utils.addClass(_this[0], 'player-muted');\n                } else {\n                    utils.removeClass(_this[0], 'player-muted');\n                }\n            });\n\n            utils.addEvent(_this[0], 'mousemove', function (e) {\n                if (_this.timer) clearTimeout(_this.timer);\n\n                if (!_this.els.ctrls.contains(e.target)) {\n                    _this.showMouse();\n                    _this.timer = setTimeout(function () {\n                        _this.hideMouse();\n                    }, 2000);\n                }\n            });\n\n            utils.addEvent(_this[0], 'mouseleave', function () {\n                _this.hideMouse();\n            });\n        }\n    }, {\n        key: 'showMouse',\n        value: function showMouse() {\n            clearTimeout(this.timer);\n            this[0].style.cursor = 'default';\n            utils.addClass(this.els.ctrls, 'player-controls-show');\n        }\n    }, {\n        key: 'hideMouse',\n        value: function hideMouse() {\n            clearTimeout(this.timer);\n            this[0].style.cursor = 'none';\n            utils.removeClass(this.els.ctrls, 'player-controls-show');\n        }\n    }, {\n        key: 'loadLrc',\n        value: function loadLrc(src) {\n            var _this = this;\n            _this.els.lrc.innerHTML = '';\n            if (!src) return;\n            this.xhr.open('get', src, true);\n            _this.xhr.onreadystatechange = function () {\n                if (_this.xhr.readyState === 4) {\n                    var txt = '[00:00.00]找不到歌词/字幕';\n                    if (_this.xhr.status === 200) {\n                        txt = _this.xhr.responseText;\n                    }\n                    _this.readLrc(txt);\n                    _this.showLrc();\n                    _this.setLrcMode();\n                }\n            };\n            _this.xhr.send();\n        }\n    }, {\n        key: 'readLrc',\n        value: function readLrc(lrcText) {\n            var _this = this,\n                lines = void 0;\n\n            if (!lrcText) return;\n\n            lines = lrcText.split(/\\n+/);\n            _this.lrcData = {};\n\n            lines.forEach(function (line) {\n                line.replace(/\\[([0-9:.\\[\\]]+)\\]/ig, function (txt, $1) {\n                    txt = line.slice(line.lastIndexOf(']') + 1).replace(/\\s+/g, '');\n                    if (txt) {\n                        for (var keys = $1.split(/\\]\\s*\\[/), len = keys.length, i = 0; i < len; i++) {\n                            var key = utils.time(keys[i]);\n                            if (_this.lrcData[key]) {\n                                _this.lrcData[key] += '<br>' + txt;\n                            } else {\n                                _this.lrcData[key] = txt;\n                            }\n                        }\n                    }\n                });\n            });\n            lrcText = null;\n            lines = null;\n            _this.lrcKeys = Object.keys(_this.lrcData);\n            _this.lrcKeys.sort(function (a, b) {\n                return Number(a) - Number(b);\n            });\n            _this.lrcLen = _this.lrcKeys.length;\n            _this.activeIndex = 0;\n        }\n    }, {\n        key: 'getLrcActive',\n        value: function getLrcActive(curtime) {\n            for (var i = 0; i < this.lrcLen; i++) {\n                var delta = parseFloat(this.lrcKeys[i]) - curtime;\n                if (delta >= 0) {\n                    if (this.lrcKeys[i - 1]) this.activeIndex = i - 1;\n                    break;\n                }\n            }\n        }\n    }, {\n        key: 'showLrc',\n        value: function showLrc() {\n            utils.addClass(this.els.lrc, 'player-lrc-show');\n        }\n    }, {\n        key: 'hideLrc',\n        value: function hideLrc() {\n            utils.removeClass(this.els.lrc, 'player-lrc-show');\n        }\n    }, {\n        key: 'renderLrc',\n        value: function renderLrc() {\n            if (this.options.lrcMode === 1) {\n                this.els.lrc.innerHTML = '';\n                var lines = this.options.showLrcLines,\n                    half = Math.floor(lines / 2),\n                    delta = Math.round(100 / (half + 1));\n\n                for (var j = 0, idx = 0, opc = delta; j < lines; j++) {\n                    idx = this.activeIndex + j - half;\n                    if (idx <= this.activeIndex) {\n                        opc += delta;\n                    } else {\n                        opc -= delta;\n                    }\n                    if (this.lrcKeys[idx]) {\n                        this.els.lrc.innerHTML += '<div class=\"player-lrc-line' + (idx === this.activeIndex ? ' player-lrc-line-active' : '') + '\" style=\"opacity: ' + (opc - delta) / 100 + ';\">' + this.lrcData[this.lrcKeys[idx]] + '</div>';\n                    }\n                }\n            } else {\n                this.els.lrc.innerHTML = '<div class=\"player-lrc-line player-lrc-line-active\">' + this.lrcData[this.lrcKeys[this.activeIndex]] + '</div>';\n            }\n        }\n    }, {\n        key: 'setLrcMode',\n        value: function setLrcMode(lrcMode) {\n            if (typeof lrcMode === 'number') {\n                this.options.lrcMode = lrcMode;\n            }\n            this.renderLrc();\n\n            if (lrcModeReg.test(this.els.lrc.className)) {\n                this.els.lrc.className = this.els.lrc.className.replace(lrcModeReg, 'player-lrc-mode-' + (this.options.lrcMode || 0));\n            } else {\n                this.els.lrc.className += ' player-lrc-mode-' + (this.options.lrcMode || 0);\n            }\n\n            var lrcLine = this.els.lrc.children[0],\n                lh = 32,\n                lrcTop = void 0;\n            if (lrcLine) {\n                lh = lrcLine.offsetHeight + (Number(utils.getCalced(lrcLine, 'lineHeight')) || 0);\n            }\n            if (this.options.lrcMode === 1) {\n                lrcTop = (this[0].offsetHeight - lh * 9) / 2;\n            } else {\n                lrcTop = this[0].offsetHeight - lh * 2;\n            }\n            utils.setTransformY(this.els.lrc, lrcTop, true);\n        }\n    }, {\n        key: 'setLrcLines',\n        value: function setLrcLines(num) {\n            if (typeof num === 'number') {\n                this.options.showLrcLines = num;\n                if (this.options.lrcMode === 1) this.setLrcMode();\n            }\n        }\n    }, {\n        key: 'update',\n        value: function update() {\n            var o = this.options;\n            this.currentTime = 0;\n            this.duration = this.lrcLen = 0;\n            this.lrcKeys = this.lrcData = null;\n            this.hideLrc();\n            if (o.src) this.els.video.src = o.src;\n            this.els.video.poster = o.poster || '';\n        }\n    }, {\n        key: '__check__',\n        value: function __check__(name) {\n            if (this.private === 0) throw TypeError((name || '__check__') + '是私有方法，不可调用');\n        }\n    }], [{\n        key: 'toString',\n        value: function toString() {\n            return '{ [ class Player ] }';\n        }\n    }]);\n\n    return Player;\n}();\n\nwindow.Player = Player;\n\n//# sourceURL=webpack:///./Player/temp1528155874269.js?");

/***/ })

/******/ });