/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./Rdate/temp1528299864425.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./Rdate/temp1528299864425.js":
/*!************************************!*\
  !*** ./Rdate/temp1528299864425.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar utils = {};\nvar todayDate = new Date();\nwindow.Rdate = {\n    todayDate: todayDate,\n    year: todayDate.getFullYear(),\n    month: todayDate.getMonth() + 1,\n    date: todayDate.getDate(),\n    day: todayDate.getDay(),\n    time: todayDate.getTime(),\n    hour: todayDate.getHours(),\n    minute: todayDate.getMinutes(),\n    second: todayDate.getSeconds(),\n    ms: todayDate.getMilliseconds(),\n    weeks: ['日', '一', '二', '三', '四', '五', '六'],\n    /**\r\n     * 格式化时间\r\n     * @param format 格式字符串，ymdhisc几个字母，大写表示不满10（毫秒1000）时前位填充0。 字符任意组合与排序，中间也可以放任意符号。\r\n     * @param time 时间戳\r\n     * @return {string}\r\n     */\n    format: function format() {\n        var _format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Y/M/D H:I:S.C';\n\n        var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n\n        var date = new Date();\n\n        if (typeof _format === 'number') {\n            time = _format;\n            _format = 'Y/M/D H:I:S.C';\n        }\n\n        if (time !== -1) date.setTime(time);\n\n        var o = {\n            Y: date.getFullYear(),\n            m: date.getMonth() + 1,\n            d: date.getDate(),\n            h: date.getHours(),\n            i: date.getMinutes(),\n            s: date.getSeconds(),\n            c: date.getMilliseconds()\n        };\n        o.y = (o.Y + '').slice(2);\n        o.M = (o.m + 100 + '').slice(1);\n        o.D = (o.d + 100 + '').slice(1);\n        o.H = (o.h + 100 + '').slice(1);\n        o.I = (o.i + 100 + '').slice(1);\n        o.S = (o.s + 100 + '').slice(1);\n        o.C = (o.c + 1000 + '').slice(1);\n\n        _format = _format.split('');\n        for (var len = _format.length; len--;) {\n            var k = _format[len];\n            if (o[k]) _format[len] = o[k];\n        }\n        return _format.join('');\n    },\n\n    /**\r\n     * 获取某个月的最后一天的日期，这是为了方便获取当月的天数\r\n     * @param year 年\r\n     * @param month 月\r\n     * @return {number}\r\n     */\n    lastDate: function lastDate() {\n        var year = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n        var month = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n\n        var date = new Date();\n\n        switch (arguments.length) {\n            case 1:\n                if (year > 0 && year <= 12) date.setMonth(year);\n                break;\n            case 2:\n                if (year >= 0) date.setFullYear(year);\n                if (month > 0 && month <= 12) date.setMonth(month);\n                break;\n            default:\n                date.setMonth(date.getMonth() + 1);\n        }\n\n        date.setDate(0);\n\n        return date.getDate();\n    },\n\n    /**\r\n     * 获取某个月的日期，以数组形式返回\r\n     * @param year 年份，如果输入为number时当作年份，但输入object时，则取当前年份和月份\r\n     * @param month 月份，如果第一个参数输入是object，此参数被忽略\r\n     * @param o 可选参数，用于配置一些模式。格式如：\r\n     *  {\r\n    *      mode: {number}  默认0，即周日在首，周六在末。 为1时，周一在首，周日在末\r\n     *      format: {String} 规定输出的日期格式，默认\"Y/M/D\"\r\n     *      limitRow: {boolean} 日期布局，默认false, 即不保持7x6格布局，例如2月份天数少，可能只有5行，即输出7x5天的日期。 为true时, 保持7x6格布局，如2月份如果不满6行，则会取前一个月或后一个月的天数来补齐整行\r\n     *  }\r\n     * @return {object}\r\n     */\n    dateTable: function dateTable() {\n        var year = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n        var month = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n        var o = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n            format: 'Y/M/D',\n            mode: 0,\n            limitRow: false\n        };\n\n        var date = new Date(),\n            last = void 0,\n            beforeDays = void 0,\n            afterDays = void 0,\n            startTime = void 0,\n            total = void 0,\n            table = void 0;\n\n        if ((typeof year === 'undefined' ? 'undefined' : _typeof(year)) === 'object') {\n            o = year;\n        } else {\n            if (year !== -1) date.setFullYear(year);\n            if (month !== -1) date.setMonth(month - 1);\n        }\n\n        last = this.lastDate(date.getFullYear(), date.getMonth() + 1);\n\n        table = {\n            year: date.getFullYear(),\n            month: date.getMonth() + 1,\n            weeks: this.weeks.slice(0),\n            dates: [],\n            prevDates: [],\n            nextDates: []\n        };\n\n        date.setDate(1);\n        beforeDays = date.getDay();\n        date.setTime(date.getTime() - beforeDays * 86400000);\n        startTime = date.getTime();\n        afterDays = (beforeDays + last) % 7;\n        afterDays = afterDays ? 7 - afterDays : 0;\n        total = beforeDays + last + afterDays;\n\n        //mode: 0 或 默认，周日在首，周六在末\n        //mode: 1，周一在首，周日在末\n        if (o.mode === 1) {\n            //前月填充部分大于0时，整个列队前移1位后，起始时间戳加1天，前部减1天，尾部加1天，如果原本是6天，加1天之后为7天，刚好一行，删除它，total减7\n            if (beforeDays) {\n                startTime += 86400000;\n                beforeDays--;\n                if (afterDays < 6) afterDays++;else {\n                    afterDays = 0;\n                    total -= 7;\n                }\n            } else {\n                //前月填充为0时，整个列队前移1位后，前面需要六个填补，起始时间戳往前6天，尾部如果大于等于6，则减去6天，\n                //前后抵销total不变，否则尾部加一天，加上前部添的6天，total加7天，其实就相当添了一行。\n                startTime -= 6 * 86400000;\n                beforeDays += 6;\n                if (afterDays >= 6) afterDays -= 6;else {\n                    afterDays++;\n                    total += 7;\n                }\n            }\n            table.weeks.splice(0, 1);\n            table.weeks.push(this.weeks[0]);\n        }\n        //limitRow: 默认false, 不保持7x6格布局\n        //limitRow: true, 保持7x6格布局\n        if (o.limitRow && total < 42) {\n            //如果天数只有四行，比如2月份有可能，则分别添加到前、后各一行\n            if (42 - total >= 14) {\n                startTime -= 7 * 86400000;\n                beforeDays += 7;\n                afterDays += 7;\n            } else {\n                //比较前后部分填充的量，补一行在较少部分\n                if (beforeDays < afterDays) {\n                    startTime -= 7 * 86400000;\n                    beforeDays += 7;\n                } else {\n                    afterDays += 7;\n                }\n            }\n            total = 42;\n        }\n\n        for (; total--;) {\n            table.dates.unshift(this.format(o.format, startTime + total * 86400000));\n        }table.prevDates = table.dates.splice(0, beforeDays);\n        table.nextDates = table.dates.splice(-afterDays, afterDays);\n        return table;\n    },\n\n    /**\r\n     * 用于获取两个时间之间的日期，用于移动端竖向列表。比如滚动列表，不断加载新的日期会用到\r\n     * @param start 起始时间或向前天数。 比如基于第二个参数的时期向前取5天，则输入5即可\r\n     * @param end 终点时间或向后天数，同上。\r\n     * @param format 可选参数，规定时间格式。默认'Y/M/D'\r\n     */\n    dateBetween: function dateBetween(start, end) {\n        var format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'Y/M/D';\n\n        var list = [];\n        if (typeof start === 'string' && typeof end === 'string') {\n            start = new Date(start).getTime();\n            end = new Date(end).getTime() + 86400000;\n        } else if (typeof start === 'number' && typeof end === 'string') {\n            end = new Date(end).getTime() + 86400000;\n            start = end - start * 86400000;\n        } else if (typeof start === 'string' && typeof end === 'number') {\n            start = new Date(start).getTime();\n            end = start + end * 86400000;\n        } else {\n            return list;\n        }\n        for (; start < end; start += 86400000) {\n            list.push(this.format(format, start));\n        }\n        return list;\n    }\n};\n\n//# sourceURL=webpack:///./Rdate/temp1528299864425.js?");

/***/ })

/******/ });